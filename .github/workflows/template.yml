name: template

on:
  push:
    paths:
      - recipes/*
      - recipes/template/*
      - .github/workflows/template.yml
      - .github/workflows/*.sh
 
  pull_request:
    paths:
      - recipes/*
      - recipes/template/*
      - .github/workflows/template.yml
      - .github/workflows/*.sh

env:
  DOCKERHUB_ORG: ${{ secrets.DOCKERHUB_ORG }}
  OS_PASSWORD: ${{ secrets.SWIFT_OS_PASSWORD }}
  OS_PROJECT_ID: ${{ secrets.SWIFT_OS_PROJECT_ID }}
  OS_USERNAME: ${{ secrets.SWIFT_OS_USERNAME }}
  OS_APPLICATION_CREDENTIAL_ID: ${{ secrets.SWIFT_OS_APPLICATION_CREDENTIAL_ID }}
  OS_APPLICATION_CREDENTIAL_SECRET: ${{ secrets.SWIFT_OS_APPLICATION_CREDENTIAL_SECRET }}

jobs:
  build-docker:
    runs-on: ubuntu-latest
    outputs:
      BUILDDATE: ${{ steps.ENVVARS.outputs.BUILDDATE }}
      IMAGELIST: ${{ steps.IMAGEVARS.outputs.IMAGELIST }}
    steps:
      - uses: actions/checkout@v2
      - name: Set environment variables
        id: ENVVARS
        run: |
          APPLICATION=$(basename $GITHUB_WORKFLOW .yml)
          SHORT_SHA=$(git rev-parse --short $GITHUB_SHA)
          BUILDDATE=`date +%Y%m%d`
          echo "APPLICATION=$APPLICATION" >> $GITHUB_ENV
          echo "SHORT_SHA=$SHORT_SHA" >> $GITHUB_ENV
          echo "BUILDDATE=$BUILDDATE" >> $GITHUB_ENV
          echo "::set-output name=BUILDDATE::$BUILDDATE"
  
      - uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - name : Build recipes
        run: |
          echo "APPLICATION: $APPLICATION"
          cd recipes/$APPLICATION
          /bin/bash build.sh

      - name: Set image variables
        id: IMAGEVARS
        run: |
          IMAGELIST=()
          for DOCKERFILE in recipes/$APPLICATION/*.Dockerfile; do
            IMAGENAME=$(echo $(basename $DOCKERFILE .Dockerfile) | tr '[A-Z]' '[a-z]')
            echo "IMAGENAME: $IMAGENAME"
            IMAGELIST+=$IMAGENAME
          done
          echo "IMAGELIST=$IMAGELIST" >> $GITHUB_ENV
          echo "::set-output name=IMAGELIST::$IMAGELIST"
      - name: Log into Github Package registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login docker.pkg.github.com -u $GITHUB_ACTOR --password-stdin
      - name: Log into Dockerhub (optional)
        if: env.DOCKERHUB_ORG != ''
        run: echo "${{ secrets.DOCKERHUB_PASSWORD }}" | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin
      - name: Testing space
        run: |
          sudo ls -l /usr
          sudo du -sh /usr/*



#       - name: Free up disk space on runner (optional)
#         if: env.APPLICATION == 'fsl' || env.APPLICATION == 'mrtrix3'
#         run: bash .github/workflows/free-up-space.sh
#       - name : Run docker builder + Upload to docker and github registry
#         run: for IMAGENAME in "${IMAGELIST[@]}"; do /bin/bash .github/workflows/build-docker.sh $IMAGENAME; done

#   build-singularity:
#     runs-on: ubuntu-latest
#     needs: build-docker
#     steps:
#       - uses: actions/checkout@v2
#       - name: Set environment variables
#         run: |
#           APPLICATION=$(basename $GITHUB_WORKFLOW .yml)
#           BUILDDATE=${{needs.build-docker.outputs.BUILDDATE}}
#           echo "APPLICATION=$APPLICATION" >> $GITHUB_ENV
#           echo "BUILDDATE=$BUILDDATE" >> $GITHUB_ENV
#       - name: Log into Github Package registry
#         run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login docker.pkg.github.com -u $GITHUB_ACTOR --password-stdin
#       - name: Log into Dockerhub (optional)
#         if: env.DOCKERHUB_ORG != ''
#         run: echo "${{ secrets.DOCKERHUB_PASSWORD }}" | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin
#       - name: Free up disk space on runner (optional)
#         if: env.APPLICATION == 'fsl' || env.APPLICATION == 'mrtrix3'
#         run: bash .github/workflows/free-up-space.sh
#       - uses: actions/setup-python@v2
#         with:
#           python-version: 3.8
#       - name : Run singularity builder + Upload singularity registry
#         run: | 
#           IMAGELIST=${{needs.build-docker.outputs.IMAGELIST}}
#           for IMAGENAME in "${IMAGELIST[@]}"; do /bin/bash .github/workflows/build-singularity.sh $IMAGENAME; done
